---
# tasks file for jenkins_teardown
# - name: Check for running EC2 instances to Terminate
#   ec2_instance_info:
#     region: "{{ aws_region }}"
#     profile: "{{ aws_profile }}"
#     filters:
#       "tag:Name": "{{ tag_value }}"
#       instance-state-name: [ "running" ]
#   register: existing_ec2

# - name: Terminate EC2 Instance
#   ec2:
#     state: absent
#     region: "{{ aws_region }}"
#     profile: "{{ aws_profile }}"
#     instance_id: "{{ existing_ec2.instances[0].instance_id }}"
#     wait: yes
#   when: existing_ec2.instances

- name: Get all vpc peers with specific filters
  ec2_vpc_peering_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "Peering connection for RDS to K8s"
  register: vpc_peer

- debug: msg="vpc_peer:{{ vpc_peer }}"

- name: delete a local VPC peering Connection
  ec2_vpc_peer:
    region: "{{ aws_region }}"
    peering_id: "{{ vpc_peer.result[0].vpc_peering_connection_id }}"
    state: absent
  register: deleted_peer
  ignore_errors: true

- name: Terminate RDS Instance
  rds_instance:
    db_instance_identifier: "{{ db_identifier }}"
    state: absent
    skip_final_snapshot: True
  ignore_errors: true

- name: Terminate RDS subnet group
  rds_subnet_group:
    state: absent
    name: "{{ db_subnet_group }}"
  ignore_errors: true

- ec2_vpc_net_info:
    region: "{{ aws_region }}"
    profile: "{{ aws_profile }}"
    filters:
      "tag:Name": "rds-{{ aws_region }}-vpc"
  register: vpc

- name: Destroy vpc security groups
  ec2_group:
    state: absent
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "rds_sg_{{ vpc.vpcs[0].id }}"
    rules:
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0
    tags:
      Name: "rds_sg"

- name: Destroy subnets
  ec2_vpc_subnet:
    state: absent
    region: "{{ aws_region }}"
    profile: "{{ aws_profile }}"
    az: "{{ item.value.az }}"
    vpc_id: "{{ vpc.vpcs[0].id }}"
    cidr: "{{ item.value.cidr }}"
    tags:
      Name: "rds_{{ item.value.az }}"
  with_dict: "{{ vpc_subnets }}"

- name: Destroy Internet Gateway
  ec2_vpc_igw:
    state: absent
    region: "{{ aws_region }}"
    profile: "{{ aws_profile }}"
    vpc_id: "{{ vpc.vpcs[0].id }}"
    tags:
      Name: "rds-igw"
  register: rds_igw

# - name: Grab the route tables
#   ec2_vpc_route_table_facts:
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     filters:
#       vpc-id: "{{ vpc.vpcs[0].id }}"
#   register: jenkins_route_table

#- name: Destroy RT
#  ec2_vpc_route_table:
#    state: absent
#    lookup: id
#    route_table_id: "{{ jenkins_route_table.route_tables[0].id }}"
#    vpc_id: "{{ vpc.vpcs[0].id }}"
#    profile: "{{ aws_profile }}"
#    region: "{{ aws_region }}"
#    tags:
#      Name: "jenkins_route_table_{{ vpc.vpcs[0].id }}"

# - name: Update subdomain with Elastic IP
#   route53:
#     state: absent
#     zone: "{{  domain_name }}"
#     record: "jenkinsa.{{ domain_name }}"
#     type: A
#     ttl: 60
#     value: "{{ eip }}"
#     wait: yes
#     profile: "{{ aws_profile }}"
#     overwrite: yes

- name: Destroy the VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    profile: "{{ aws_profile }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ aws_region }}"
    state: absent
    tags:
      Name: "{{ vpc_name }}"
    tenancy: default

